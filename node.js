// Generated by CoffeeScript 1.4.0
(function() {
  var Array, Assign, BinaryOperation, Block, Bool, Call, Class, Conditional, Constructor, Expr, Function, Identifier, InsAssign, Int, Literal, Member, New, Object, Operator, Program, Return, String, This, makeArray, makeAssign, makeBinaryOp, makeBlock, makeCall, makeEmpty, makeExpr, makeForIn, makeFunc, makeId, makeIf, makeLogicalOp, makeMember, makeMemberObj, makeNew, makeObj, makeReturn, makeThis, makeVarDeclaration, makeVarDeclarator, setExtends, setReturn, setVar, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("lodash");

  exports.Program = Program = (function() {

    function Program(body) {
      this.body = body;
      this.type = "Program";
    }

    Program.prototype.toString = function() {
      return this.body.map(function(x) {
        return x.toString();
      });
    };

    Program.prototype.toESC = function() {
      return {
        type: this.type,
        body: this.body.map(function(x) {
          return x.toESC();
        })
      };
    };

    return Program;

  })();

  exports.Expr = Expr = (function() {

    function Expr(expr) {
      this.expr = expr;
      this.type = "ExpressionStatement";
    }

    Expr.prototype.toString = function() {
      return this.expr.toString();
    };

    Expr.prototype.toESC = function() {
      return makeExpr(this.expr.toESC());
    };

    return Expr;

  })();

  makeExpr = function(expr) {
    return {
      type: "ExpressionStatement",
      expression: expr
    };
  };

  exports.Function = Function = (function() {

    function Function(args, body) {
      this.args = args;
      this.body = body;
      this.type = "FunctionExpression";
    }

    Function.prototype.toString = function() {
      if (this.args) {
        return "(" + this.args.toString() + ")->" + this.body.toString();
      } else {
        return "->" + this.body.toString();
      }
    };

    Function.prototype.toESC = function() {
      var body, params;
      if (this.args) {
        params = this.args.map(function(x) {
          return x.toESC();
        });
      } else {
        params = [];
      }
      if (this.body != null) {
        this.body.block = setReturn(this.body.block);
        body = this.body.toESC();
      } else {
        body = makeBlock([makeEmpty]);
      }
      return makeFunc(null, params, body, false);
    };

    return Function;

  })();

  setReturn = function(body) {
    var last;
    last = body.pop();
    switch (last.type) {
      case 'ExpressionStatement':
        body.push(new Return(last.expr));
        break;
      case 'Return':
        body.push(last);
        break;
      case 'IfStatement':
        last.body.block = setReturn(last.body.block);
        if (last["else"]) {
          last["else"].block = setReturn(last["else"].block);
        }
        body.push(last);
        break;
      default:
        body.push(new Return(last));
    }
    return body;
  };

  makeEmpty = {
    type: "EmptyStatement"
  };

  makeFunc = function(id, params, body, ex) {
    return {
      type: "FunctionExpression",
      id: id,
      params: params,
      defaults: [],
      rest: null,
      body: body,
      generator: false,
      expression: ex
    };
  };

  this.BinaryOperation = BinaryOperation = (function() {

    function BinaryOperation(left, op, right) {
      this.left = left;
      this.op = op;
      this.right = right;
      this.type = "BinaryOperation";
    }

    BinaryOperation.prototype.toString = function() {
      return this.left.toString() + this.op + this.right.toString();
    };

    BinaryOperation.prototype.toESC = function() {
      if (this.op === "||" || this.op === "&&") {
        return makeLogicalOp(this.left.toESC(), this.op, this.right.toESC());
      } else {
        return makeBinaryOp(this.left.toESC(), this.op, this.right.toESC());
      }
    };

    return BinaryOperation;

  })();

  makeBinaryOp = function(left, op, right) {
    return {
      type: 'BinaryExpression',
      operator: op,
      left: left,
      right: right
    };
  };

  makeLogicalOp = function(left, op, right) {
    return {
      type: 'LogicalExpression',
      operator: op,
      left: left,
      right: right
    };
  };

  exports.Literal = Literal = (function() {

    function Literal(literal) {
      this.literal = literal;
      this.type = "Literal";
    }

    Literal.prototype.toString = function() {
      return this.literal.toString();
    };

    Literal.prototype.toESC = function() {
      return {
        type: this.type,
        value: this.literal
      };
    };

    return Literal;

  })();

  exports.Int = Int = (function(_super) {

    __extends(Int, _super);

    function Int() {
      return Int.__super__.constructor.apply(this, arguments);
    }

    return Int;

  })(Literal);

  exports.Bool = Bool = (function(_super) {

    __extends(Bool, _super);

    function Bool() {
      return Bool.__super__.constructor.apply(this, arguments);
    }

    return Bool;

  })(Literal);

  this.String = String = (function(_super) {

    __extends(String, _super);

    function String() {
      return String.__super__.constructor.apply(this, arguments);
    }

    return String;

  })(Literal);

  exports.Identifier = Identifier = (function() {

    function Identifier(identifier) {
      this.identifier = identifier;
      this.type = "Identifier";
    }

    Identifier.prototype.toString = function() {
      return this.identifier;
    };

    Identifier.prototype.toESC = function() {
      return {
        type: this.type,
        name: this.identifier.toString()
      };
    };

    return Identifier;

  })();

  exports.Operator = Operator = (function() {

    function Operator(op) {
      this.op = op;
      this.type = "Operator";
    }

    Operator.prototype.toString = function() {
      return this.op;
    };

    Operator.prototype.toESC = function() {
      return this.op;
    };

    return Operator;

  })();

  exports.Block = Block = (function() {

    function Block(block) {
      this.block = block;
      this.type = "BlockStatement";
    }

    Block.prototype.toString = function() {
      return "{" + this.block.map(function(x) {
        return x.toString();
      }) + "}";
    };

    Block.prototype.toESC = function() {
      var block, dec, declarations;
      block = this.block.map(function(x) {
        return x.toESC();
      });
      dec = (setVar(this.env)).concat(setExtends(this.env));
      if (dec.length > 0) {
        declarations = makeVarDeclaration(dec);
        block.unshift(declarations);
      }
      return makeBlock(block);
    };

    return Block;

  })();

  makeBlock = function(body) {
    return {
      type: "BlockStatement",
      body: body
    };
  };

  makeId = function(id) {
    return {
      type: "Identifier",
      name: id.toString()
    };
  };

  makeVarDeclarator = function(id, init) {
    return {
      type: "VariableDeclarator",
      id: makeId(id),
      init: init
    };
  };

  makeVarDeclaration = function(vars) {
    return {
      type: "VariableDeclaration",
      declarations: vars,
      kind: "var"
    };
  };

  setVar = function(env) {
    var vars;
    if (env.variable.length > 0) {
      vars = env.variable.map(function(x) {
        return makeVarDeclarator(x, null);
      });
      return vars;
    } else {
      return [];
    }
  };

  exports.Assign = Assign = (function() {

    function Assign(left, right) {
      this.left = left;
      this.right = right;
      this.type = "AssignmentExpression";
    }

    Assign.prototype.toString = function() {
      return this.left.toString() + "=" + this.right.toString();
    };

    Assign.prototype.toESC = function() {
      return makeAssign(this.left.toESC(), this.right.toESC());
    };

    return Assign;

  })();

  makeAssign = function(left, right) {
    return {
      type: "AssignmentExpression",
      operator: "=",
      left: left,
      right: right
    };
  };

  this.Conditional = Conditional = (function() {

    function Conditional(cond, body, _else) {
      this.cond = cond;
      this.body = body;
      this["else"] = _else;
      this.type = "IfStatement";
    }

    Conditional.prototype.toString = function() {
      if (this["else"] != null) {
        return " if " + this.cond.toString() + " \n " + this.body.toString() + " \n else " + this["else"].toString();
      } else {
        return " if " + this.cond.toString() + " \n " + this.body.toString() + " \n";
      }
    };

    Conditional.prototype.toESC = function() {
      var alternate;
      if (this["else"]) {
        alternate = this["else"].toESC();
      } else {
        alternate = null;
      }
      return makeIf(this.cond.toESC(), this.body.toESC(), alternate);
    };

    return Conditional;

  })();

  makeIf = function(test, consequent, alter) {
    return {
      type: "IfStatement",
      test: test,
      consequent: consequent,
      alternate: alter
    };
  };

  this.Class = Class = (function() {

    function Class(name, parent, body) {
      this.name = name;
      this.parent = parent;
      this.body = body;
      this.type = 'Class';
    }

    Class.prototype.toString = function() {
      var p;
      if (this.parent) {
        p = " extends " + this.parent.toString();
      } else {
        p = "";
      }
      return "class " + this.name.toString() + p + "\n" + this.body.toString();
    };

    Class.prototype.toESC = function() {
      var args, body, name, parent, r, v, _super;
      name = this.env.className.toESC();
      args = [];
      _super = [];
      this["const"] = _.find(this.body.block, function(st) {
        return st.type === "Constructor";
      });
      this.body.block = _.reject(this.body.block, function(st) {
        return st.type === "Constructor";
      });
      body = this.body.toESC();
      if (this.parent != null) {
        parent = this.parent.toESC();
        _super.push(makeId("_super"));
        body.body.unshift(makeExpr(makeCall(makeId("__extends"), [name, makeId("_super")])));
        if (!this["const"]) {
          body.body.unshift(makeExpr(makeAssign(name, makeFunc(null, [], makeBlock([makeReturn(makeCall(makeMember(makeMember(makeMember(name, makeId("__super__"), false), makeId("constructor"), false), makeId("apply"), false), [makeThis(), makeId("arguments")]))], false)))));
        } else {
          body.body.unshift(this["const"].toESC());
        }
        args.push(parent);
      } else {
        if (!this["const"]) {
          body.body.unshift(makeExpr(makeAssign(name, makeFunc(null, [], makeBlock([]), false))));
        }
      }
      body.body.push(makeReturn(name));
      v = makeVarDeclaration([makeVarDeclarator(name.name, null)]);
      body.body.unshift(v);
      r = makeCall(makeFunc(null, _super, body, false), args);
      if (this.name != null) {
        return {
          type: "AssignmentExpression",
          operator: "=",
          left: this.name.toESC(),
          right: r
        };
      } else {
        return r;
      }
    };

    return Class;

  })();

  makeCall = function(callee, args) {
    return {
      type: "CallExpression",
      callee: callee,
      "arguments": args
    };
  };

  this.InsAssign = InsAssign = (function() {

    function InsAssign(left, right) {
      this.left = left;
      this.right = right;
      this.type = "InsAssign";
    }

    InsAssign.prototype.toString = function() {
      return this.left.toString() + ":" + this.right.toString();
    };

    InsAssign.prototype.toESC = function() {
      return makeAssign(makeMember(makeMember(this.className.toESC(), makeId("prototype")), this.left.toESC(), false), this.right.toESC());
    };

    return InsAssign;

  })();

  makeObj = function(properties) {
    return {
      type: "ObjectExpression",
      properties: properties
    };
  };

  makeMember = function(obj, prop, cmp) {
    return {
      type: "MemberExpression",
      object: obj,
      property: prop,
      computed: cmp
    };
  };

  makeReturn = function(arg) {
    return {
      type: "ReturnStatement",
      argument: arg
    };
  };

  makeForIn = function(left, right, body) {
    return {
      type: "ForInStatement",
      left: left,
      right: right,
      body: body,
      each: false
    };
  };

  makeThis = function() {
    return {
      type: "ThisExpression"
    };
  };

  makeNew = function(call, args) {
    return {
      type: "NewExpression",
      callee: call,
      "arguments": args
    };
  };

  setExtends = function(env) {
    var ex, extend;
    extend = [];
    if (env.extend) {
      extend.push(makeVarDeclarator("__hasProp", makeMember(makeObj([]), makeId("hasOwnProperty"), false)));
      ex = makeVarDeclarator("__extends", makeFunc(null, [makeId("child"), makeId("parent")], makeBlock([makeForIn(makeVarDeclaration([makeVarDeclarator("key", null)]), makeId("parent"), makeIf(makeCall(makeMember(makeId("__hasProp"), makeId("call"), false), [makeId("parent"), makeId("key")]), makeExpr(makeAssign(makeMember(makeId("child"), makeId("key"), true), makeMember(makeId("parent"), makeId("key"), true))), null)), makeExpr(makeAssign(makeId("ctor"), makeFunc(null, [], makeBlock([makeExpr(makeAssign(makeMember(makeThis(), makeId("constructor"), false), makeId("child")))]), false))), makeExpr(makeAssign(makeMember(makeId("ctor"), makeId("prototype")), makeMember(makeId("parent"), makeId("prototype")))), makeExpr(makeAssign(makeMember(makeId("child"), makeId("prototype")), makeNew(makeId("ctor"), []))), makeExpr(makeAssign(makeMember(makeId("child"), makeId("__super__")), makeMember(makeId("parent"), makeId("prototype")))), makeReturn(makeId("child"))]), false));
      extend.push(ex);
      return extend;
    } else {
      return extend;
    }
  };

  this.Constructor = Constructor = (function() {

    function Constructor(body) {
      this.body = body;
      this.type = "Constructor";
    }

    Constructor.prototype.toString = function() {
      return "constructor:" + this.body.toString();
    };

    Constructor.prototype.toESC = function() {
      return makeExpr(makeAssign(this.className.toESC(), this.body.toESC()));
    };

    return Constructor;

  })();

  this.Member = Member = (function() {

    function Member(obj, prop) {
      this.obj = obj;
      this.prop = prop;
      this.type = "Member";
    }

    Member.prototype.toString = function() {
      return this.obj.toString() + "." + this.prop.map(function(x) {
        return x.toString();
      });
    };

    Member.prototype.toESC = function() {
      var object, p, property;
      if (this.prop.length !== 0) {
        p = this.prop.map(function(x) {
          return x.toESC();
        });
        property = p.pop();
        object = makeMemberObj(this.obj.toESC(), p);
        return makeMember(object, property, false);
      } else {
        return this.obj.toESC();
      }
    };

    return Member;

  })();

  makeMemberObj = function(obj, prop) {
    var object, toObj;
    toObj = function(obj, prop) {
      return makeMember(obj, prop, false);
    };
    object = _.foldl(prop, toObj, obj);
    return object;
  };

  this.New = New = (function() {

    function New(obj, args) {
      this.obj = obj;
      this.args = args;
      this.type = "New";
    }

    New.prototype.toString = function() {
      return "new " + this.obj.toString() + "( " + this.args.map(function(x) {
        return x.toString();
      }) + " )";
    };

    New.prototype.toESC = function() {
      if (this.obj.type === "Identifier") {
        return makeNew(this.obj.toESC(), this.args.map(function(x) {
          return x.toESC();
        }));
      } else {
        return makeNew(this.obj.obj.toESC(), this.args.map(function(x) {
          return x.toESC();
        }));
      }
    };

    return New;

  })();

  this.Return = Return = (function() {

    function Return(expr) {
      this.expr = expr;
      this.type = "Return";
    }

    Return.prototype.toString = function() {
      return "return " + expr.toString();
    };

    Return.prototype.toESC = function() {
      var expr;
      if (this.expr) {
        expr = this.expr.toESC();
      } else {
        expr = this.expr;
      }
      return makeReturn(expr);
    };

    return Return;

  })();

  this.This = This = (function() {

    function This() {
      this.type = "This";
    }

    This.prototype.toString = function() {
      return "this";
    };

    This.prototype.toESC = function() {
      return makeThis();
    };

    return This;

  })();

  this.Array = Array = (function() {

    function Array(members) {
      this.members = members;
      this.type = "Array";
    }

    Array.prototype.toString = function() {
      return "[" + this.members.map(function(x) {
        return x.toString();
      }) + "]";
    };

    Array.prototype.toESC = function() {
      return makeArray(this.members.map(function(x) {
        return x.toESC();
      }));
    };

    return Array;

  })();

  makeArray = function(members) {
    return {
      type: "ArrayExpression",
      elements: members
    };
  };

  this.Object = Object = (function() {

    function Object(members) {
      this.members = members;
      this.type = "Object";
    }

    Object.prototype.toString = function() {
      return "{" + this.members.map(function(x) {
        return x.toString();
      }) + "}";
    };

    Object.prototype.toESC = function() {
      console.log(this.members);
      return makeObj(this.members.map(function(x) {
        return {
          key: x.key.toESC(),
          value: x.value.toESC(),
          kind: "init"
        };
      }));
    };

    return Object;

  })();

  this.Call = Call = (function() {

    function Call(callee, args) {
      this.callee = callee;
      this.args = args;
      this.type = "Call";
    }

    Call.prototype.toString = function() {
      return this.callee.toString() + "(" + this.args.map(function(x) {
        return x.toString();
      }) + ")";
    };

    Call.prototype.toESC = function() {
      return makeCall(this.callee.toESC(), this.args.map(function(x) {
        return x.toESC();
      }));
    };

    return Call;

  })();

}).call(this);
