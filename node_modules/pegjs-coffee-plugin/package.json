{
  "name": "pegjs-coffee-plugin",
  "version": "0.1.0",
  "description": "A plugin for PEG.js to use CoffeeScript in your actions.",
  "homepage": "https://github.com/Dignifiedquire/peg-coffee",
  "keywords": [
    "coffeescript",
    "javascript",
    "PEG",
    "plugin"
  ],
  "main": "lib/pegjs-coffee-plugin.js",
  "bin": {
    "pegcoffee": "bin/pegcoffee.js"
  },
  "scripts": {
    "test": "make test",
    "build": "make build"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Dignifiedquire/pegjs-coffee-plugin.git"
  },
  "author": {
    "name": "Friedel Ziegelmayer",
    "email": "dignifiedquire@gmail.com"
  },
  "licenses": [
    {
      "type": "3-clause BSD",
      "url": "https://raw.github.com/Dignifiedquire/peg-coffee/master/LICENSE"
    }
  ],
  "license": "3-clause BSD",
  "dependencies": {
    "coffee-script": "~1.3.3",
    "pegjs": "~0.7.0"
  },
  "devDependencies": {
    "mocha": "~1.4.2",
    "expect.js": "~0.1.2",
    "http-server": "~0.5.1",
    "jshint": "~0.9.0",
    "uglify-js": "~1.3.3"
  },
  "engines": {
    "node": ">= 0.6.6"
  },
  "readme": "PEGjs Coffee Plugin\n==========\n\nPlugin for PEG.js to use CoffeeScript in actions. Because all I want\nfor christmas is CoffeeScript.\n\n## Status\nThe basic functionality is finished. Please test it and add feature\nrequests and issues [here](https://github.com/Dignifiedquire/pegjs-coffee-plugin/issues).\n\n## Requirements\n\n* [PEG.js](http://pegjs.majda.cz/) (who would have guessed that?)\n* [CoffeeScript](http://coffeescript.org/)\n\n## Installation\n\n#### Node.js\n\n```bash\n$ npm install pegjs-coffee-plugin\n```\nThen in your code call\n```coffee-script\nPEG = require 'pegjs'\nPEGjsCoffeePlugin = require 'pegjs-coffee-plugin'\n```\n\n#### Browser\n\nDownload the\n[development](https://raw.github.com/Dignifiedquire/pegjs-coffee-plugin/master/dist/web/pegjs-coffee-plugin-0.1.0.js)\nor the\n[minified](https://raw.github.com/Dignifiedquire/pegjs-coffee-plugin/master/dist/web/pegjs-coffee-plugin-0.1.0.min.js) version.\nNow include all needed scripts in your html file like this.\n```html\n<script src=\"peg.js\"></script>\n<script src=coffee-script.js\"></script>\n<script src=\"pegjs-coffee-plugin.js\"></script>\n```\n\n## Usage\n\n### Script\nAfter you have loaded all scripts you can do\n\n```coffee-script\nPEGjsCoffeePlugin.addTo PEG\n# From here on out you can use CoffeeScript in your actions\nPEG.compile(..)\n```\nIf you don't need it anymore you can do the following\n```coffee-script\nPEGjsCoffeePlugin.removeFrom PEG\n# From here on out everything is back to the way it was before\nPEG.compile(..)\n```\n### Command line\nYou can use the command line interface the same way you use the one by\nPEGjs. \n```bash\n$ pegcoffee myGrammar.pegcoffee myCompiledGrammar.js\n```\nIt defaults to use CoffeeScript but if you pass it the option `--js`\nyou get the old Javascript back.\n\n## Added Features\nYou now have a save scope shared between all actions and predicates. \nTo begin it is empty, then all declarations from the initializer are\nadded. Afterwards you can add and remove stuff as much as you like.\nThis scope is there even if you don't use the initializer. So you can\ndo something like the following.\n```coffee-script\nstart = a { @result }\na = \"a\" { @result = \"awesome\" }\n```\nAnd this will correctly return `\"awesome\"` if you call `parse(\"a\")`.\n\nAlso all variable assignments in an action are safely scoped to the\naction. `{ result = \"awesome\" }` becomes `{ var result; result =\n\"awesome\" }`. This gives you the ability to explicitly share variables\nwith other actions via `this` and the security to just assign\nvariables for local use like you are used to when writing CoffeeScript.\n\n\n## Syntax changes\nThere is no need to call `return` anymore. You can just do\n```coffee-script\nstart = a:\"a\" { \"Great Stuff\" }\n```\nwhich is the equivalent of\n\n```javascript\nstart = a:\"a\" { return \"Great Stuff\"; }\n```\n\nIf you declare variables in your initializer you set them on `this`.\n```coffee-script\n{\n  @result = \"\"\n}\nstart\n  = awesome / rule { @result }\nawesome\n  = \"awesome\" { @result = \"awesome\" }\nrule\n  = \"rule\" { @result = \"rule }\n```\n\n\n\n-------------\n\n## Development\n\n\n### Requirements\n\n* [Node.js](http://nodejs.org/) with npm\n* [mocha](http://visionmedia.github.com/mocha/)\n* [expect.js](https://github.com/LearnBoost/expect.js)\n* [http-server](https://github.com/nodeapps/http-server)\n* [JSHint](http://www.jshint.com/)\n* [UglifyJS](https://github.com/mishoo/UglifyJS)\n\n### Setup\n\nClone the repo and run the install\n```bash\n$ git clone https://github.com/Dignifiedquire/pegjs-coffee-plugin.git\n$ make install\n```\n\n### Building\n\n```bash\n$ make build\n```\n\n# Running the tests\n\nFor the Node.js tests run\n```bash\n$ make test\n```\nand for the browser tests\n```bash\n$ make test-browser\n```\nand open your browser on [localhost:3000](http://localhost:3000).\n\n\n\n# Todo\n\n* more tests\n* make bower package\n\n",
  "readmeFilename": "README.md",
  "_id": "pegjs-coffee-plugin@0.1.0",
  "_from": "pegjs-coffee-plugin@*"
}
