start = program

program = TERMINATOR? _ b:block

block = s:statement ss:(_ TERMINATOR _ statement)* TERMINATOR?

statement = ex:expressionworthy / conditional / return

expressionworthy = ABExpr / call / func
ABExpr = assignExpr / binaryExpr

func = params:( "(" _ args? _ ")" _ )? "->" _ body:funcBody?
args = a:identifier as:(_ "," _ identifier )*
//preprocessor DEDENT -> DEDENT TERM
funcBody = TERMINDENT b:block DEDENT TERM / s:statement

assignExpr = left:left _ "=" !"=" _ right:expressionworthy

call = caller _ accesses:callAccesses
caller = left
callAccesses = argumentList
argumentList = "(" _ a:argumentListContents? _ ")"
argumentListContents = e:argument es:(_ "," _ argument)*
argument = binaryExpr / call

conditional = IF _ cond:ABExpr body:conditionalBody _ e:elseClause?
conditionalBody = funcBody
elseClause = TERMINATOR? _ ELSE b:elseBody { return b; }
elseBody = funcBody

leftExpr = call / primary

return = RETURN _ e:expressionworthy? {return new node.Return(e || null);}

binaryExpr = l:leftExpr r:( _ o:binaryOperator _ e:(expressionworthy / primary){return [o,e]})*
binaryOperator = a:CompoundAssignmentOperators !"=" / "<=" / ">=" / "<" / ">" / "=="  / "!="
CompoundAssignmentOperators = "&&" / "||" / [*/%] / e:"+" !"+" / e:"-" !"-"

primary = literal / left
literal = Number / bool
left = identifier / r:THIS

bool = TRUE / FALSE

Number = integer

integer "integer"
  = "0" / head:[1-9] digits:decimalDigit*
decimalDigit = [0-9]

hexDigit = [0-9a-fA-F]

//keyword
IF = a:"if" !identifierPart {return a}
ELSE = a:"else" !identifierPart {return a}
RETURN = a:"return" !identifierPart {return a}

TRUE = a:"true" !identifierPart {return a}
FALSE = a:"false" !identifierPart {return a}

identifier = !reserved i:identifierName
identifierName = head:identifierStart tail:identifierPart*
identifierStart
  = UniLetter
  / [$_]
identifierPart
  = identifierStart
  / UniDigit

whiteSpace = [\u0009\u000B\u000C\u0020\u00A0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]
  / "\r" / s:("\\" "\r"? "\n") { return s.join("");}
_  = __?
__ = ws:whiteSpace+ {return ws.join("");}

INDENT = "\uEFEF"
DEDENT = ws:(TERMINATOR? _) "\uEFFE" { return ws.join(""); }
TERM = n:("\r"? "\n"){return n.join("");} / "\uEFFF" { return ''; }
TERMINATOR = t:(_ TERM)+ {return t.join("");}
TERMINDENT = t:(TERMINATOR INDENT) {return t.join("");}

Keywords
  = ("true" / "false" / "return" / "if" / "else") !identifierPart

reserved = Keywords

UniDigit = [0-9]
UniLetter = [A-Za-z]